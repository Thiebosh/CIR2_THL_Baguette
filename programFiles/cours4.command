
===== EXECUTION =====
addInstruct(command::_ENTER_FUNCTION_,"");
addInstruct(command::_EMPILE_VALUE_,"PARTIE 1\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"peut faire des choses avant la fonction\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_EMPILE_VALUE_,-1);
addInstruct(command::_EMPILE_VALUE_,10);
addInstruct(command::_CREATE_FUNCTION_,"test");
addInstruct(command::_GOTO_,15);
addInstruct(command::_ENTER_FUNCTION_,"test");
addInstruct(command::_EMPILE_VALUE_,"\tOn est dans la fonction ! \n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,4);
addInstruct(command::_EXIT_FUNCTION_);
addInstruct(command::_EMPILE_VALUE_,"creation ok\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,-1);
addInstruct(command::_CALL_FUNCTION_,"test");
addInstruct(command::_EMPILE_VALUE_,"utilisation ok \n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"retour ok si 4 : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,-1);
addInstruct(command::_CALL_FUNCTION_,"test");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n\nPARTIE 2\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"");
addInstruct(command::_EMPILE_VALUE_,-1);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_EMPILE_VALUE_,"val1");
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_EMPILE_VALUE_,"val2");
addInstruct(command::_EMPILE_VALUE_,"");
addInstruct(command::_EMPILE_VALUE_,"val3");
addInstruct(command::_EMPILE_VALUE_,41);
addInstruct(command::_CREATE_FUNCTION_,"test_param");
addInstruct(command::_GOTO_,67);
addInstruct(command::_ENTER_FUNCTION_,"test_param");
addInstruct(command::_EMPILE_VALUE_,"valeurs transmises : \n\t");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"val1");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n\t");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"val2");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n\t");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"val3");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n");
addInstruct(command::_WRITE_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VARIABLE_,"val1");
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_DIFF_);
addInstruct(command::_GOTO_TEST_,64);
addInstruct(command::_EMPILE_VALUE_,"val1 différente de 0 \n");
addInstruct(command::_WRITE_);
addInstruct(command::_GOTO_,64);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,"c'est bon, j'ai fini!");
addInstruct(command::_EXIT_FUNCTION_);
addInstruct(command::_EMPILE_VALUE_,-1);
addInstruct(command::_EMPILE_VALUE_,12);
addInstruct(command::_EMPILE_VALUE_,45);
addInstruct(command::_EMPILE_VALUE_,"un string");
addInstruct(command::_CALL_FUNCTION_,"test_param");
addInstruct(command::_EMPILE_VALUE_,"");
addInstruct(command::_CREATE_VARIABLE_,"valeur_retour");
addInstruct(command::_EMPILE_VALUE_,"valeur retournée : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"valeur_retour");
addInstruct(command::_WRITE_);
addInstruct(command::_EXIT_FUNCTION_);

=====================
