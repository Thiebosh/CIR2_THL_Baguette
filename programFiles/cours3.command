
===== EXECUTION =====
addInstruct(command::_ENTER_FUNCTION_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_CREATE_VARIABLE_,"valeur");
addInstruct(command::_EMPILE_VALUE_,"PARTIE 1 : SI\n\n");
addInstruct(command::_WRITE_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VARIABLE_,"valeur");
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_INFERIEUR_);
addInstruct(command::CREATE_VARIABLE_,");
addInstruct(command::_EMPILE_VALUE_,"premier if (pas accessible)\n");
addInstruct(command::_WRITE_);
addInstruct(command::TEST_,);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EQUIV_);
addInstruct(command::RIABLE_,");
addInstruct(command::_EMPILE_VALUE_,"deuxieme if - then (accès)\n");
addInstruct(command::_WRITE_);
addInstruct(command::ATE_VARIABLE_,");
addInstruct(command::_EMPILE_VALUE_,"deuxieme if - else (pas accessible)\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VARIABLE_,"valeur");
addInstruct(command::_EMPILE_VALUE_,8);
addInstruct(command::_PLUS_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_DIFF_);
addInstruct(command::DATE_VARIABLE_,");
addInstruct(command::_EMPILE_VALUE_,"troisième if - then (accès)\n");
addInstruct(command::_WRITE_);
addInstruct(command::,");
addInstruct(command::_EMPILE_VALUE_,"troisième if - else (pas accessible)\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,"\n\n\nPARTIE 2 : TESTS AVANCES\n\n");
addInstruct(command::_WRITE_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EQUIV_);
addInstruct(command::_EMPILE_VALUE_,10);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_INFERIEUR_);
addInstruct(command::_AND_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_DIFF_);
addInstruct(command::_OR_);
addInstruct(command::_EMPILE_VALUE_,5);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_DIFF_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_DIFF_);
addInstruct(command::_EMPILE_VALUE_,8);
addInstruct(command::_EMPILE_VALUE_,2);
addInstruct(command::_MOINS_);
addInstruct(command::_EMPILE_VALUE_,8);
addInstruct(command::_SUPERIEUR_);
addInstruct(command::_AND_);
addInstruct(command::_OR_);
addInstruct(command::_AND_);
addInstruct(command::");
addInstruct(command::_EMPILE_VALUE_,"if test - validé\n");
addInstruct(command::_WRITE_);
addInstruct(command::TION_,");
addInstruct(command::_EMPILE_VALUE_,"if test - échoué\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,"\n\n\nPARTIE 3 : TANT QUE\n\n");
addInstruct(command::_WRITE_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VARIABLE_,"valeur");
addInstruct(command::_EMPILE_VALUE_,2);
addInstruct(command::_SUPERIEUR_);
addInstruct(command::");
addInstruct(command::_EMPILE_VALUE_,"while : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_PLUS_CREMENT_,"valeur");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_," (2 repetition)\n");
addInstruct(command::_WRITE_);
addInstruct(command::_,");
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,"do while : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_MOINS_CREMENT_,"valeur");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_," (2 repetitions)\n");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"valeur");
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_INF_EGAL_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EQUIV_);
addInstruct(command::_ENTER_FUNCTION_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,"\n\n\nPARTIE 4 : POUR\n\n");
addInstruct(command::_WRITE_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_CREATE_VARIABLE_,"i");
addInstruct(command::_EMPILE_VARIABLE_,"i");
addInstruct(command::_EMPILE_VALUE_,3);
addInstruct(command::_SUPERIEUR_);
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_PLUS_CREMENT_,"i");
addInstruct(command::_EMPILE_VALUE_,"for : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"i");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n");
addInstruct(command::_WRITE_);
addInstruct(command::ION_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_ENTER_BLOCK_);
addInstruct(command::_EMPILE_VALUE_,0);
addInstruct(command::_EMPILE_VALUE_,1);
addInstruct(command::_CREATE_VARIABLE_,"i");
addInstruct(command::_EMPILE_VARIABLE_,"i");
addInstruct(command::_EMPILE_VALUE_,15);
addInstruct(command::_SUPERIEUR_);
addInstruct(command::AD_,");
addInstruct(command::_EMPILE_VALUE_,7);
addInstruct(command::_PLUS_CREMENT_,"i");
addInstruct(command::_EMPILE_VALUE_,"for : ");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VARIABLE_,"i");
addInstruct(command::_WRITE_);
addInstruct(command::_EMPILE_VALUE_,"\n");
addInstruct(command::_WRITE_);
addInstruct(command::N_);
addInstruct(command::_EXIT_BLOCK_);
addInstruct(command::_EXIT_FUNCTION_);

=====================
